<!DOCTYPE html>
<html>
<head>
    <title>To Do</title>
    <link rel="stylesheet" type="text/css" href="/styles.css">
</head>
<body>
    
    <div class="container">
        <a href="/api/logout" class="logout">Logout</a>
        <h2>Fun TO DO</h2>
        <div class="main-content">
            <div class="form-section">
                <form action="/api/todos" method="POST">
                    
                    <div class="form-group">
                        <label for="taskName">Task Name:</label>
                        <input type="text" id="taskName" name="taskName" required>
                    </div>
                    <div class="form-group">
                        <label for="description">Description:</label>
                        <input type="text" id="description" name="description">
                    </div>
                    <div class="form-group">
                        <label for="dueDate">Due Date:</label>
                        <input type="date" id="dueDate" name="dueDate">
                    </div>
                    <div class="form-group">
                        <label for="status">Status:</label>
                        <select id="status" name="status" required>
                            <option value="Incomplete">Incomplete</option>
                            <option value="Ongoing">Ongoing</option>
                            <option value="Completed">Completed</option>
                        </select>
                    </div>
                    
                    <button type="submit">Add Task</button>
                </form>
    
                <h3> Filter Tasks:</h3>
                <form id="filterForm" onsubmit="filterTasks(event)">
                    <div class="form-group">
                        <label for="filterTaskName">Task Name:</label>
                        <input type="text" id="filterTaskName" name="taskName">
                    </div>
                    <div class="form-group">
                        <label for="filterStatus">Status:</label>
                        <select id="filterStatus" name="status">
                            <option value="">All</option>
                            <option value="Incomplete">Incomplete</option>
                            <option value="Ongoing">Ongoing</option>
                            <option value="Completed">Completed</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="filterDueDate">Due Date:</label>
                        <input type="date" id="filterDueDate" name="dueDate">
                    </div>
                    <button type="submit">Search</button>
                    <button type="button" onclick="clearFilters()">Clear Filters</button>
                </form>
            </div>
    
            <!-- Due Today Section -->
            <div class="due-today">
                <h3>Due Today</h3>
                <ul>
                        <% if (todosDueToday.length > 0) { %>
                            <% todosDueToday.forEach(function(todo) { %>
                                <li><%= todo.taskName %> - <%= todo.description %></li>
                            <% }) %>
                        <% } else { %>
                            <li>No tasks due today</li>
                        <% } %>
                </ul>
            </div>
        </div>
    
        <table>
            <thead>
                <tr>
                    <th>Task Number</th>
                    <th>Task Name</th>
                    <th>Description</th>
                    <th>Due Date</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <% if (locals.todos) { %>
                    <% todos.forEach(function(todo) { %>
                        
                        <tr data-tasknum="<%= todo.taskNum %>">
                            
                            <td ><%= todo.taskNum %></td>
                            <td class="taskName"><%= todo.taskName %></td>
                            <td class="description"><%= todo.description %></td>
                            <td class="dueDate" ><%= new Date(todo.dueDate).toLocaleDateString('en-GB',{ day: '2-digit', month: '2-digit', year: 'numeric' }) %> </td>
                            <td class="status"><%= todo.status %></td>
                            
                            <td>
                                <a href="#" class="update-btn" onclick="showEditModal('<%= todo.taskNum %>', '<%= todo.taskName %>', '<%= todo.description %>', '<%= todo.status %>','<%= todo.dueDate %>')">
                                    Update
                                </a>
                                <a href="/api/todos/<%= todo.taskNum %>" id="delete-btn" class="delete-btn">Delete</a>
                            </td>
                        </tr>
                    <% }) %>
                <% } %> 
            </tbody>
        </table>
    </div>
    
    <!-- Edit Modal -->

    <div id="editModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeEditModal()">&times;</span>
            <h2>Edit Task</h2>
            <form id="editForm" >
                <input type="hidden" id="editTaskNum" name="taskNum">
                <div class="form-group">
                    <label for="editTaskName">Task Name:</label>
                    <input type="text" id="editTaskName" name="taskName" required>
                </div>
                <div class="form-group">
                    <label for="editDescription">Description:</label>
                    <input type="text" id="editDescription" name="description">
                </div>
                <div class="form-group">
                    <label for="editDueDate">Due Date:</label>
                    <input type="date" id="editDueDate" name="dueDate" required>
                </div>
                <div class="form-group">
                    <label for="editStatus">Status:</label>
                    <select id="editStatus" name="status" required>
                        <option value="Incomplete">Incomplete</option>
                        <option value="Ongoing">Ongoing</option>
                        <option value="Completed">Completed</option>
                    </select>
                </div>
                <a href="#" id="submitEditForm" class="button update" onclick="submitEditForm()">Update Task</a>
            </form>
        </div>


    <script>
//update tasks
 function submitEditForm() {
    const taskNum = document.getElementById('editTaskNum').value;
    const taskName = document.getElementById('editTaskName').value;
    const description = document.getElementById('editDescription').value;
    const status = document.getElementById('editStatus').value;
    const dueDate = document.getElementById('editDueDate').value;

    // Prepare the data to send
    const data = {
        taskName: taskName,
        description: description,
        status: status,
        dueDate: dueDate
    };
    if (dueDate) {
        data.dueDate = dueDate;
    }

    // Send the PUT/PATCH request
        fetch(`/api/update/${taskNum}`, {
            method: 'PATCH', // or 'PATCH' depending on your server-side implementation
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        })
        .then(response => {
        if (!response.ok) {
            throw new Error('Failed to update task');
        }
        return response.json();  // Parse the JSON response
    })
        .then(updatedTask => {
            // Use updatedTask to update the DOM
            const taskRow = document.querySelector(`tr[data-tasknum="${updatedTask.taskNum}"]`);
            taskRow.querySelector('.taskName').textContent = updatedTask.taskName;
            taskRow.querySelector('.description').textContent = updatedTask.description;
            taskRow.querySelector('.status').textContent = updatedTask.status;
            taskRow.querySelector('.dueDate').textContent = new Date(updatedTask.dueDate).toLocaleDateString('en-GB',{ day: '2-digit', month: '2-digit', year: 'numeric' });

        })
        .catch(error => {
            console.error('Error:', error);
        });

        // Close the modal
        closeEditModal();
    }


        //Update task modal form
        function showEditModal(taskNum, taskName, description, status, dueDate) {
            document.getElementById('editTaskNum').value = taskNum;
            document.getElementById('editTaskName').value = taskName;
            document.getElementById('editDescription').value = description;
            document.getElementById('editStatus').value = status;
            document.getElementById('editDueDate').value = dueDate;
            document.getElementById('editModal').style.display = 'block';
        }

        function closeEditModal() {
            document.getElementById('editModal').style.display = 'none';
        }

        document.getElementById('submitEditForm').addEventListener('click', function(event) {
            event.preventDefault();
            submitEditForm();
        });

        //Filtering tasks
        async function filterTasks(event) {
        event.preventDefault(); // Prevent the default form submission

        // Get the filter values from the form
        const taskName = document.getElementById('filterTaskName').value;
        const status = document.getElementById('filterStatus').value;
        const dueDate = document.getElementById('filterDueDate').value;

        // Construct the query parameters based on the filter values
        const queryParams = new URLSearchParams({
            taskName,
            status,
            dueDate
        }).toString();

        try {
            // Fetch the filtered tasks from the server
            const response = await fetch(`/api/filter?${queryParams}`);

            // Check if the response is OK
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }

            // Parse the JSON response
            const todos = await response.json();

            // Check if the todos array is not empty
            if (todos.length > 0) {
                // Update the table with the filtered tasks
                const resultsTableBody = document.querySelector('table tbody');
                resultsTableBody.innerHTML = todos.map(todo => `
                    <tr>
                        <td>${todo.taskNum}</td>
                        <td>${todo.taskName}</td>
                        <td>${todo.description}</td>
                        <td>${formatDate(todo.dueDate)}</td>
                        <td>${todo.status}</td>
                        <td>
                            <a href="#" class="update-btn" onclick="showEditModal('${todo.taskNum}', '${todo.taskName}', '${todo.description}', '${todo.status}')" class="update-btn">Update</a>
                            <a href="/api/todos/${todo.taskNum}" class="delete-btn">Delete</a>
                        </td>
                    </tr>
                `).join('');
            } else {
                // Handle case where no tasks are found
                document.querySelector('table tbody').innerHTML = '<tr><td colspan="6">No tasks found</td></tr>';
            }
        } catch (error) {
            console.error('Error filtering tasks:', error);
        }
    }

        //Clear filter
        function clearFilters() {
            const filterForm = document.getElementById('filterForm');
            filterForm.reset(); // Reset the form fields
            filterForm.submit(); // Submit the form
        }

        // Date Format conversion
        function formatDate(dateString) {
            const date = new Date(dateString);
            const options = { day: 'numeric', month: 'short', year: 'numeric' };
            return date.toLocaleDateString('en-GB', options);
        }

        document.addEventListener('DOMContentLoaded', () => {
            const dateElements = document.querySelectorAll('td[data-date]');
            dateElements.forEach(element => {
                element.textContent = formatDate(element.getAttribute('data-date'));
            });
        });

       
        //Deleting a task(confirmation box)
        document.addEventListener('DOMContentLoaded', function() {
            document.body.addEventListener('click', function(event) {
                if (event.target.classList.contains('delete-btn')) {
                    event.preventDefault(); // Prevent the default action
                    console.log("Delete button clicked");
                    const userConfirmed = confirm("Are you sure you want to delete the task?");
                    if (userConfirmed) {
                        window.location.href = event.target.href; // Proceed with the link
                    }
                }
            });
        });
        
     

        // Delete Task Function
    //     function deleteTodo(taskNum) {
    //     fetch(`/api/todos/${taskNum}`, {
    //         method: 'DELETE',
    //         headers: {
    //             'Content-Type': 'application/json'
    //         }
    //     }).then(response => {
    //         if (response.ok) {
    //             // Handle successful deletion (e.g., remove the item from the DOM, show a success message)
    //             console.log('Todo deleted');
    //             // You can add logic here to remove the deleted item from the DOM, if needed.
    //         } else {
    //             // Handle errors
    //             console.error('Failed to delete todo');
    //         }
    //     }).catch(error => {
    //         console.error('Error:', error);
    //     });
    // }
    </script>
</body>
</html>
